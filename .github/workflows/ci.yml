name: Game of Life Workflow

# TODO add a script for building
# TODO maybe add a report for test ?
# TODO maybe add a coverage report data ?
# TODO maybe add a static analyzer ?

# Run the workflow on every push and pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # Step 1: Run CodeQL static analysis
  # static-analysis:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         languages: cpp

  #     - name: Build the code (for analysis)
  #       run: |
  #         mkdir -p build
  #         cd build
  #         cmake -DCMAKE_BUILD_TYPE=Debug ..
  #         cmake --build . -- -j

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2
  #       with:
  #         category: 'security'

  # Step 1: Build Debug configuration
  build-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Build in Debug configuration
        run: |
          mkdir -p build-debug
          cd build-debug
          cmake -DCMAKE_BUILD_TYPE=Debug -Wno-dev ..
          cmake --build . -- -j

      - name: Compress build-debug directory into tar.gz
        run: tar -czf build-debug.tar.gz build-debug

      - name: Upload build-debug directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-artifact
          path: build-debug.tar.gz

  # Step 2: Run tests (only if Debug build succeeded)
  run-tests:
    runs-on: ubuntu-latest
    needs: build-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build-debug artifact
        uses: actions/download-artifact@v3
        with:
          name: build-debug-artifact
          path: .

      - name: Extract the tar.gz file
        run: tar -xzf build-debug.tar.gz
          
      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
      
      - name: Run tests in Debug configuration
        run: |
          cd build-debug
          ctest --output-on-failure --gtest_output=xml:../test_results.xml || exit 0
      # TODO fix all tests and remove the exit 1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test_results.xml

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: test_results.xml
          format: junit

          
  # Step 3: Build in RelWithDebInfo (only if tests passed)
  build-relwithdebinfo:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Build in RelWithDebInfo configuration
        run: |
          mkdir build-relwithdebinfo
          cd build-relwithdebinfo
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo  -Wno-dev ..
          cmake --build . -- -j

      - name: Compress build-relwithdebinfo directory into tar.gz
        run: tar -czf build-relwithdebinfo.tar.gz build-relwithdebinfo

      - name: Upload build-relwithdebinfo directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-relwithdebinfo-artifact
          path: build-relwithdebinfo.tar.gz

  # Step 4: Build Release (only if all previous steps passed)
  build-release:
    runs-on: ubuntu-latest
    needs: build-relwithdebinfo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Build in Release configuration
        run: |
          mkdir build-release
          cd build-release
          cmake -DCMAKE_BUILD_TYPE=Release  -Wno-dev ..
          cmake --build . -- -j

      - name: Compress build-release directory into tar.gz
        run: tar -czf build-release.tar.gz build-release

      - name: Upload build-release directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-release-artifact
          path: build-release.tar.gz
