name: Game of Life Workflow

# Run the workflow on every push and pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Build Debug configuration
  build-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Conan
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install conan
        
      - name: Configure Conan profile
        run: |
          conan profile detect --force

      - name: Build in Debug configuration with sanitizer
        run: |
          ./build.sh -c Debug -a

      - name: Compress build-debug directory into tar.gz
        run: tar -czf build-debug.tar.gz build-debug

      - name: Upload build-debug directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: gameOfLife-debug.tar.gz
          path: build-debug.tar.gz

  # Step 2: Run tests (only if Debug build succeeded)
  run-tests:
    runs-on: ubuntu-latest
    needs: build-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build-debug artifact
        uses: actions/download-artifact@v3
        with:
          name: gameOfLife-debug.tar.gz
          path: .

      - name: Extract the tar.gz file
        run: tar -xzf build-debug.tar.gz
          
      - name: Run tests in Debug configuration
        run: |
          cd build-debug
          ctest --output-on-failure

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: junit_report
          path: build-debug/junit_report.xml

      # Generate coverage report using gcovr
      - name: Generate Coverage Report
        run: |
          sudo apt-get install gcovr
          cd build-debug
          mkdir coverage
          gcovr --r .. -e '/.*/(build-debug|tests)/' --html --html-details -o coverage/coverage.html

      # Upload coverage reports as artifacts
      - name: Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v3
        with:
          name: coverage.html
          path: build-debug/coverage

  # Step 2bis: Static Analyzis with Clang-Tidy
  static-analysis:
    runs-on: ubuntu-latest
    needs: build-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Conan
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install conan
        
      - name: Configure Conan profile
        run: |
          conan profile detect --force

      - name: Build in Debug configuration with Clang-Tidy checks enabled
        run: |
          ./build.sh -c Debug -s

      # Step 2bis: Memcheck with valgrind
  heap-analysis:
    runs-on: ubuntu-latest
    needs: build-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install valgrind
        run: |
          sudo apt-get update && sudo apt-get install -y valgrind python3 python3-pip
          pip3 install ValgrindCI

      - name: Install Conan
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install conan
          
      - name: Configure Conan profile
        run: |
          conan profile detect --force
  
      - name: Build in Debug configuration without sanitizer
        run: |
          ./build.sh -c Debug
      
      - name: Run valgrind with memcheck
        run: |
          mkdir valgrind-report
          valgrind --tool=memcheck --xml=yes --xml-file=valgrind-report/heap_analyzis.xml -v --leak-check=full --trace-children=yes --show-reachable=yes --trace-children=yes --track-origins=yes --time-stamp=yes  ./build-debug/GameOfLife --iterations 100 --input tests/input_files/spaceship/rPentomino.txt --all
          valgrind --tool=memcheck  -v --leak-check=full --log-file=valgrind-report/heap_analyzis.valg --trace-children=yes --show-reachable=yes --trace-children=yes --track-origins=yes --time-stamp=yes  ./build-debug/GameOfLife --iterations 100 --input tests/input_files/spaceship/rPentomino.txt --all

      - name: Generate HTML report
        run: |
          cd valgrind-report
          valgrind-ci heap_analyzis.xml --source-dir=../ --output-dir=.

      - name: Upload valgrind report
        uses: actions/upload-artifact@v3
        with:
          name: valgrind-report.zip
          path: valgrind-report

      - name: Check if valgrind found a leak
        run: |
          cd valgrind-report
          valgrind-ci heap_analyzis.xml --abort-on-errors

  # Step 3: Build in RelWithDebInfo (only if tests passed)
  build-relwithdebinfo:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build in RelWithDebInfo configuration
        run: |
          ./build.sh -c RelWithDebInfo

      - name: Compress build-relwithdebinfo directory into tar.gz
        run: tar -czf build-relwithdebinfo.tar.gz build-relwithdebinfo

      - name: Upload build-relwithdebinfo directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: gameOfLife-relwithdebinfo.tar.gz
          path: build-relwithdebinfo.tar.gz

  # Step 4: Run Heap profiling 
  heap-profiling:
    runs-on: ubuntu-latest
    needs: build-relwithdebinfo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install gperftools
        run: sudo apt-get install google-perftools libunwind-dev libgoogle-perftools-dev

      - name: Install gperftools
        run: sudo apt-get install google-perftools libunwind-dev libgoogle-perftools-dev

      - name: Build in RelWithDebInfo configuration with Heap profiling
        run: |
          ./build.sh -c RelWithDebInfo -p heap

      - name: HEAP Profiling
        run: |
          ./build-relwithdebinfo/GameOfLife --iterations 500 --input tests/input_files/bigStable.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife heap_profiling.prof* > heap_profiling_bigStable.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife heap_profiling.prof*
          rm heap_profiling.prof*
          ./build-relwithdebinfo/GameOfLife --iterations 500 --input tests/input_files/spaceship/rPentomino.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife heap_profiling.prof* > heap_profiling_pentomino.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife heap_profiling.prof*
          rm heap_profiling.prof*
          ./build-relwithdebinfo/GameOfLife --iterations 500 --input tests/input_files/spaceship/gosperGliderGun.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife heap_profiling.prof* > heap_profiling_gosper.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife heap_profiling.prof*

      - name: Upload profiling reports Big Stable
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: heap_profiling_bigStable.pdf

      - name: Upload profiling reports Gosper
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: heap_profiling_gosper.pdf

      - name: Upload profiling reports Pentomino
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: heap_profiling_pentomino.pdf


  # Step 4bis: CPU profiling
  cpu-profiling:
    runs-on: ubuntu-latest
    needs: build-relwithdebinfo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install gperftools
        run: sudo apt-get install google-perftools libunwind-dev libgoogle-perftools-dev

      - name: Build in RelWithDebInfo configuration with Heap profiling
        run: |
          ./build.sh -c RelWithDebInfo -p cpu

      # Launch CPU profiling with 1 interrupt every 10Âµs
      - name: CPU Profiling
        run: |
          CPUPROFILE_FREQUENCY=100000 
          ./build-relwithdebinfo/GameOfLife --iterations 1000 --input tests/input_files/bigStable.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife cpu_profiling.prof > cpu_profiling_bigStable.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife cpu_profiling.prof
          rm cpu_profiling.prof
          ./build-relwithdebinfo/GameOfLife --iterations 1000 --input tests/input_files/spaceship/rPentomino.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife cpu_profiling.prof > cpu_profiling_pentomino.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife cpu_profiling.prof
          rm cpu_profiling.prof
          ./build-relwithdebinfo/GameOfLife --iterations 1000 --input tests/input_files/spaceship/gosperGliderGun.txt --all
          google-pprof --pdf ./build-relwithdebinfo/GameOfLife cpu_profiling.prof > cpu_profiling_gosper.pdf
          google-pprof --text ./build-relwithdebinfo/GameOfLife cpu_profiling.prof

      - name: Upload profiling reports Bit Stable
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: heap_profiling_bigStable.pdf

      - name: Upload profiling reports Gosper
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: cpu_profiling_gosper.pdf

      - name: Upload profiling reports Pentomino
        uses: actions/upload-artifact@v3
        with:
          name: Profiling reports
          path: cpu_profiling_pentomino.pdf

  # Step 5: Build Release
  build-release:
    runs-on: ubuntu-latest
    needs: [heap-analysis, heap-profiling, cpu-profiling, static-analysis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build in Release configuration
        run: |
          ./build.sh

      - name: Compress build-release directory into tar.gz
        run: tar -czf build-release.tar.gz build-release

      - name: Upload build-release directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-release-artifact
          path: build-release.tar.gz
